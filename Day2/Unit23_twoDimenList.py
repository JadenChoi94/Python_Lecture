# 2차원 리스트 [[10, 20], [30, 40], [50, 60]]은 가로 크기가 일정한 사각형 리스트입니다.
# 특히 파이썬에서는 가로 크기가 불규칙한 톱니형 리스트(jagged list)도 만들 수 있습니다.
a = []
a.append([])
a[0].append(10)
a[0].append(20)
a.append([])
a[1].append(500)
a[1].append(600)
a[1].append(700)
a

# 반복문으로 2차원 리스트의 요소를 모두 출력하기
a = [[10, 20], [30, 40], [50, 60]]
for x, y in a:
    print(x,y)

for i in a:        # a에서 안쪽 리스트를 꺼냄
    for K in i:    # 안쪽 리스트에서 요소를 하나씩 꺼냄
        print(K, end=' ')
    print()

a = [[10, 20], [30, 40], [50, 60]]
for i in range(len(a)):  # 세로 크기 3
    for j in range(len(a[i])):  # 가로 크기 2
        print(a[i][j], end=' ')
    print()

# while 반복문을 두 번 사용하기
a = [[10, 20], [30, 40], [50, 60]]

i = 0
while i < len(a):  # 세로 크기
    j = 0
    while j < len(a[i]):  # 가로 크기
        print(a[i][j], end=' ')
        j += 1  # 가로 인덱스를 1 증가시킴
    print()
    i += 1  # 세로 인덱스를 1 증가시킴

# 리스트 표현식으로 2차원 리스트 만들기
r = [[0 for j in range(2)] for i in range(3)]
r
g = [[0] * 2 for i in range(3)]
g

# 톱니형 리스트 만들기
a = [3, 1, 3, 2, 5]  # 가로 크기를 저장한 리스트
b = []  # 빈 리스트 생성

for i in a:  # 가로 크기를 저장한 리스트로 반복
    line = []  # 안쪽 리스트로 사용할 빈 리스트 생성
    for j in range(i):  # 리스트 a에 저장된 가로 크기만큼 반복
        line.append(0)
    b.append(line)  # 리스트 b에 안쪽 리스트를 추가
print(b)

# 리스트 표현식
a = [[0] * i for i in [3, 1, 3, 2, 5]]
a

# 2차원 리스트 정렬하기
students = [
    ['john', 'C', 19],
    ['maria', 'A', 25],
    ['andrew', 'B', 7]
]
print(sorted(students, key=lambda student: student[1]))  # 안쪽 리스트의 인덱스 1을 기준으로 정렬
print(sorted(students, key=lambda student: student[2]))  # 안쪽 리스트의 인덱스 2를 기준으로 정렬

# 이번에는 2차원 리스트의 할당과 복사에 대해 알아보겠습니다. '22.2 리스트의 할당과 복사'에서 리스트를 다른 변수에
# 할당해도 변수 이름만 달라질 뿐 같은 리스트(객체)라고 했죠? 2차원 리스트도 마찬가지입니다.
# 다음과 같이 2차원 리스트를 만든 뒤 다른 변수에 할당하고, 요소를 변경해보면 두 리스트에 모두 반영됩니다.
a = [[10, 20], [30, 40]]
b = a
b[0][0] = 500

# 그런데 리스트 a를 copy 메서드로 b에 복사한 뒤 b의 요소를 변경해보면 리스트 a와 b에 모두 반영됩니다.
a = [[10, 20], [30, 40]]
b = a.copy()
b[0][0] = 500

# 2차원 이상의 다차원 리스트는 리스트를 완전히 복사하려면 copy 메서드 대신 copy 모듈의 deepcopy 함수를 사용해야 합니다.
a = [[10, 20], [30, 40]]
import copy             # copy 모듈을 가져옴
b = copy.deepcopy(a)    # copy.deepcopy 함수를 사용하여 깊은 복사
b[0][0] = 500

# 이제 리스트 b의 요소를 변경해도 리스트 a에는 영향을 미치지 않습니다. copy.deepcopy 함수는 중첩된 리스트(튜플)에
# 들어있는 모든 리스트(튜플)를 복사하는 깊은 복사(deep copy)를 해줍니다.
# 지금까지 2차원 리스트에 대해 배웠는데 문법이 조금 복잡했습니다. 다차원 리스트는 어려운 주제이므로 당장 이해가 되지
# 않는다면 그냥 넘어가도 됩니다. 일단 2차원 리스트는 세로, 가로 순으로 접근한다는 점만 기억하면 됩니다.